/**
* Основной класс игры, управляющий игровым процессом.
* Отвечает за загрузку уровней, обработку ввода пользователя
* и управление состоянием игры.
*/
class Game {
    field int _levelId;
    field Level _currentLevel;
    field int _startX;
    field int _startY;
    field boolean _stopLevel;
    field boolean _isPlayerDied;

    constructor Game new(int startX, int startY){
        let _levelId = 1;
        let _startX = startX;
        let _startY = startY;
        let _currentLevel = 0;
        let _stopLevel = false;
        let _isPlayerDied = false;
        return this;
    }

    method void render(){
        do Screen.clearScreen();
        do _currentLevel.render(_startX, _startY);
        return;
    }

    method void run(){
        var Score score;

        while (true){
            let _stopLevel = false;
            do _loadLevel();
            do _runLevel();
            if (_isPlayerDied)
            {
                let score = _currentLevel.getScore();
                do score.setCoins(0);
                do Main.waitForContinue("GAME OVER");
            }
        }

        return;
    }

    method void nextLevel() {
        let _levelId = _levelId + 1;
        let _stopLevel = true;
        let _isPlayerDied = false;
        return;
    }

    method void setDead() {
        let _levelId = 1;
        let _stopLevel = true;
        let _isPlayerDied = true;
        return;
    }

    method void _loadLevel(){
        var Score score;
        var int oldCoins;

        if (~(_currentLevel = 0)) {
            let score = _currentLevel.getScore();
            let oldCoins = score.getCoins();
            do _currentLevel.dispose();
        }

        let _currentLevel = Levels.loadLevel(_levelId);
        let score = _currentLevel.getScore();
        do score.setCoins(oldCoins);
        return;
    }

    method void _runLevel(){
        var char key;

        do render();
        while (~_stopLevel){
            while (key = 0){
                let key = Keyboard.keyPressed();
            }

            do _handleKey(key);
            if (_stopLevel){
                return;
            }

            while (~(key = 0)){
                let key = Keyboard.keyPressed();
            }
        }

        return;
    }

    method void _handleKey(char key){
        if ((key = 131) | (key = 87)){ // up or 'W' = move up
            do _handleMovement(0);
            return;
        }

        if ((key = 133) | (key = 83)){ // down or 'S' = move down
            do _handleMovement(1);
            return;
        }

        if ((key = 130) | (key = 65)){ // left or 'A' = move up
            do _handleMovement(2);
            return;
        }

        if ((key = 132) | (key = 68)){ // right or 'D' = move up
            do _handleMovement(3);
            return;
        }

        return;
    }

    /** 
    Обрабатывает движение игрока в сторону.
    0 - up, 1 - down, 2 - left, 3 - right    
    */
    method void _handleMovement(int direction){
        var Player player;

        let player = _currentLevel.getPlayer();

        do player.tryMove(_currentLevel, direction, _startX, _startY);
        return;
    }
}
