/** Класс, отвечающий за типы блоков. */
class Block {
    static Block air;
    static Block stone;
    static Block money;
    static Block key;

    field int id;
    field boolean moveThrough;

    constructor Block new(int blockId, boolean canMoveThrough){
        let id = blockId;
        let moveThrough = canMoveThrough;
        return this;
    }

    /** Инициализирует типы блоков */
    function void initBlocks(){
        let air = Block.new(0, true);
        let stone = Block.new(1, false);
        let money = Block.new(2, true);
        let key = Block.new(3, true);
        return;
    }

    /** Парсит блок из символа */
    function Block parse(char blockChar){
        if ((blockChar = 32) | (blockChar = 80)){ // ' ' or 'P' = air
            return air;
        }

        if (blockChar = 35){ // '#' = stone
            return stone;
        }

        if (blockChar = 77){ // 'M' = money
            return money;
        }

        if (blockChar = 75){ // 'K' = key
            return key;
        }

        do Exception.throw("Block: invalid block");
        return 0;
    }

    /** Отрисовывает блок с учётом координаты левого края и размеров */
    method void render(int x, int y, int width, int height){
        if (id = 0){  // air
            return;
        }
        if (id = 1){  // stone
            do _renderFull(x, y, width, height);
        }
        if (id = 2){  // money
            do _renderCoin(x, y, width, height);
        }
        if (id = 3){  // key
            do _renderKey(x, y, width, height);
        }
        return;
    }

    /** Рендерит полностью закрашенный квадрат */
    method void _renderFull(int x, int y, int width, int height){
        // TODO: оптимизировать
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    method void _renderCoin(int x, int y, int width, int height) {
        var int centerX, centerY, radius;
        let centerX = x + (width / 2);
        let centerY = y + (height / 2);
        let radius = Math.min(width, height) / 4;  // Радиус монетки
        
        do Screen.drawCircle(centerX, centerY, radius);
        return;
    }

    /** Рендерит ключ */
    method void _renderKey(int x, int y, int width, int height){
        var int centerX, centerY;
        let centerX = x + (width / 2);
        let centerY = y + (height / 2);
        
        // Рисуем круг для головки ключа
        do Screen.drawCircle(centerX, centerY - 4, 3);
        // Рисуем "ножку" ключа
        do Screen.drawLine(centerX, centerY - 1, centerX, centerY + 4);
        // Рисуем "зубчики" ключа
        do Screen.drawLine(centerX, centerY + 4, centerX + 2, centerY + 4);
        do Screen.drawLine(centerX, centerY + 2, centerX + 2, centerY + 2);
        return;
    }

    /** Возвращает ID блока */
    method int getId(){
        return id;
    }

    /** Проверяет, является ли блок монеткой */
    method boolean isCoin(){
        return getId() = 2;  // 2 - это ID монетки
    }

    /** Проверяет, можно ли пройти через блок */
    method boolean canMoveThrough() {
        return moveThrough;
    }

    /** Возвращает блок воздуха */
    function Block getAir(){
        return air;
    }
}
