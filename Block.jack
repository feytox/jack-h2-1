/** Класс, отвечающий за типы блоков. */
class Block {
    static Block air;
    static Block stone;
    static Block money;
    static Block key;
    static Block finish;

    field int id;
    field boolean moveThrough;

    constructor Block new(int blockId, boolean canMoveThrough){
        let id = blockId;
        let moveThrough = canMoveThrough;
        return this;
    }

    /** Инициализирует типы блоков */
    function void initBlocks(){
        let air = Block.new(0, true);
        let stone = Block.new(1, false);
        let money = Block.new(2, true);
        let key = Block.new(3, true);
        let finish = Block.new(4, true);
        return;
    }

    /** Парсит блок из символа */
    function Block parse(char blockChar){
        if ((blockChar = 32) | (blockChar = 80)){ // ' ' or 'P' = air
            return air;
        }

        if (blockChar = 35){ // '#' = stone
            return stone;
        }

        if (blockChar = 77){ // 'M' = money
            return money;
        }

        if (blockChar = 75){ // 'K' = key
            return key;
        }

        if (blockChar = 70){ // 'F' = finish
            return finish;
        }

        do Exception.throw("Block: invalid block");
        return 0;
    }

    /** Отрисовывает блок с учётом координаты левого края и размеров */
    method void render(int x, int y, int width, int height){
        if (id = 0){  // air
            return;
        }
        if (id = 1){  // stone
            do _renderFull(x, y, width, height);
        }
        if (id = 2){  // money
            do _renderCoin(x, y, width, height);
        }
        if (id = 3){  // key
            do _renderKey(x, y, width, height);
        }
        if (id = 4){  // finish
            do _renderFinish(x, y, width, height);
        }
        if (id = 5){  // player normal
            do _renderPlayer(x, y, width, height);
        }
        if (id = 6){  // player right wall
            do _renderPlayerRight(x, y, width, height);
        }
        if (id = 7){  // player top
            do _renderPlayerTop(x, y, width, height);
        }
        if (id = 8){  // player left wall
            do _renderPlayerLeft(x, y, width, height);
        }
        return;
    }

    /** Рендерит полностью закрашенный квадрат */
    method void _renderFull(int x, int y, int width, int height){
        // TODO: оптимизировать
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    method void _renderCoin(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 960);
        do Memory.poke(memAddress + 64, 4080);
        do Memory.poke(memAddress + 96, 7224);
        do Memory.poke(memAddress + 128, 15324);
        do Memory.poke(memAddress + 160, 12876);
        do Memory.poke(memAddress + 192, 25158);
        do Memory.poke(memAddress + 224, 25542);
        do Memory.poke(memAddress + 256, 24646);
        do Memory.poke(memAddress + 288, 24646);
        do Memory.poke(memAddress + 320, 12364);
        do Memory.poke(memAddress + 352, 14428);
        do Memory.poke(memAddress + 384, 7224);
        do Memory.poke(memAddress + 416, 4080);
        do Memory.poke(memAddress + 448, 960);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    /** Рендерит ключ */
    method void _renderKey(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 28);
        do Memory.poke(memAddress + 192, 38);
        do Memory.poke(memAddress + 224, 13814);
        do Memory.poke(memAddress + 256, 32766);
        do Memory.poke(memAddress + 288, 62);
        do Memory.poke(memAddress + 320, 28);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    /** Рендерит финиш (замок) */
    method void _renderFinish(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 2016);
        do Memory.poke(memAddress + 64, 3120);
        do Memory.poke(memAddress + 96, 2448);
        do Memory.poke(memAddress + 128, 2640);
        do Memory.poke(memAddress + 160, 2640);
        do Memory.poke(memAddress + 192, 2640);
        do Memory.poke(memAddress + 224, 2640);
        do Memory.poke(memAddress + 256, 8184);
        do Memory.poke(memAddress + 288, 12300);
        do Memory.poke(memAddress + 320, 8196);
        do Memory.poke(memAddress + 352, 8196);
        do Memory.poke(memAddress + 384, 8196);
        do Memory.poke(memAddress + 416, 8196);
        do Memory.poke(memAddress + 448, 12300);
        do Memory.poke(memAddress + 480, 8184);
        return;
    }

    /** Рендерит обычный спрайт игрока */
    method void _renderPlayer(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 8184);
        do Memory.poke(memAddress + 128, 12300);
        do Memory.poke(memAddress + 160, 8196);
        do Memory.poke(memAddress + 192, 9828);
        do Memory.poke(memAddress + 224, 9828);
        do Memory.poke(memAddress + 256, 8196);
        do Memory.poke(memAddress + 288, 8196);
        do Memory.poke(memAddress + 320, 9238);
        do Memory.poke(memAddress + 352, 13282);
        do Memory.poke(memAddress + 384, 4098);
        do Memory.poke(memAddress + 416, 6130);
        do Memory.poke(memAddress + 448, 5142);
        do Memory.poke(memAddress + 480, 7196);
        return;
    }

    /** Рендерит спрайт игрока у правой стены */
    method void _renderPlayerRight(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4080);
        do Memory.poke(memAddress + 96, -2024);
        do Memory.poke(memAddress + 128, -32760);
        do Memory.poke(memAddress + 160, -6968);
        do Memory.poke(memAddress + 192, 10440);
        do Memory.poke(memAddress + 224, 10248);
        do Memory.poke(memAddress + 256, 10248);
        do Memory.poke(memAddress + 288, 10440);
        do Memory.poke(memAddress + 320, 10440);
        do Memory.poke(memAddress + 352, -7160);
        do Memory.poke(memAddress + 384, -32744);
        do Memory.poke(memAddress + 416, -14352);
        do Memory.poke(memAddress + 448, 31744);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    /** Рендерит спрайт игрока на потолке */
    method void _renderPlayerTop(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 14392);
        do Memory.poke(memAddress + 32, 26664);
        do Memory.poke(memAddress + 64, 20456);
        do Memory.poke(memAddress + 96, 16392);
        do Memory.poke(memAddress + 128, 18380);
        do Memory.poke(memAddress + 160, 26660);
        do Memory.poke(memAddress + 192, 8196);
        do Memory.poke(memAddress + 224, 8196);
        do Memory.poke(memAddress + 256, 9828);
        do Memory.poke(memAddress + 288, 9828);
        do Memory.poke(memAddress + 320, 8196);
        do Memory.poke(memAddress + 352, 12300);
        do Memory.poke(memAddress + 384, 8184);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    /** Рендерит спрайт игрока у левой стены */
    method void _renderPlayerLeft(int x, int y, int width, int height) {
        var int location, memAddress;
        let location = ((y * 32) + (x / 16));
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4080);
        do Memory.poke(memAddress + 96, 6175);
        do Memory.poke(memAddress + 128, 4097);
        do Memory.poke(memAddress + 160, 4903);
        do Memory.poke(memAddress + 192, 4884);
        do Memory.poke(memAddress + 224, 4116);
        do Memory.poke(memAddress + 256, 4116);
        do Memory.poke(memAddress + 288, 4884);
        do Memory.poke(memAddress + 320, 4884);
        do Memory.poke(memAddress + 352, 4135);
        do Memory.poke(memAddress + 384, 6145);
        do Memory.poke(memAddress + 416, 4067);
        do Memory.poke(memAddress + 448, 62);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    /** Возвращает ID блока */
    method int getId(){
        return id;
    }

    /** Проверяет, является ли блок монеткой */
    method boolean isCoin(){
        return getId() = 2;  // 2 - это ID монетки
    }

    /** Проверяет, является ли блок ключом */
    method boolean isKey(){
        return getId() = 3;  // 3 - это ID ключа
    }

    /** Проверяет, является ли блок финишем */
    method boolean isFinish() {
        return getId() = 4;  // 4 - это ID финиша
    }

    /** Проверяет, можно ли пройти через блок */
    method boolean canMoveThrough() {
        return moveThrough;
    }

    /** Возвращает блок воздуха */
    function Block getAir(){
        return air;
    }
}
