class Level {
    field Map _map;
    field Player _player;
    field Score _score;

    constructor Level new(Map map, Player player){
        let _map = map;
        let _player = player;
        let _score = Score.new();
        do player.setMap(map);  // Устанавливаем карту для проверки столкновений
        
        // Отладочная информация
        do Output.moveCursor(14, 0);
        do Output.printString("Map set. Width: ");
        do Output.printInt(map.getWidth());
        do Output.printString(" Height: ");
        do Output.printInt(map.getHeight());
        
        return this;
    }

    /** Обрабатывает нажатия клавиш */
    method void handleKey() {
        var char key;
        let key = Keyboard.keyPressed();
        
        // Отладочная информация о нажатой клавише
        do Output.moveCursor(15, 0);
        do Output.printString("Key pressed: ");
        do Output.printInt(key);
        
        if (key = 87) {  // W - вверх
            do Output.printString(" UP");
            do _player.moveUp();
        }
        if (key = 83) {  // S - вниз
            do Output.printString(" DOWN");
            do _player.moveDown();
        }
        if (key = 65) {  // A - влево
            do Output.printString(" LEFT");
            do _player.moveLeft();
        }
        if (key = 68) {  // D - вправо
            do Output.printString(" RIGHT");
            do _player.moveRight();
        }
        
        // Очищаем буфер клавиатуры
        while (~(Keyboard.keyPressed() = 0)) {
            // Ждем, пока клавиша не будет отпущена
        }
        return;
    }

    /** Запускает игровой цикл */
    method void run() {
        var char key;
        var boolean running;
        let running = true;
        
        while (running) {
            // Очищаем экран только когда что-то изменилось
            let key = Keyboard.keyPressed();
            
            if (key = 81) { // Q - выход
                let running = false;
            }
            
            if ((key = 87) | (key = 83) | (key = 65) | (key = 68)) {  // WASD
                do Screen.clearScreen();
                
                if (key = 87) { do _player.moveUp(); }    // W
                if (key = 83) { do _player.moveDown(); }  // S
                if (key = 65) { do _player.moveLeft(); }  // A
                if (key = 68) { do _player.moveRight(); } // D
                
                do _map.render(32, 32, 16, 16);
                do _player.render(32, 32);
                do _score.PrintCounters();
                do update();
            }
            
            do Sys.wait(50);
        }
        return;
    }

    method void render(int startX, int startY){
        do _map.render(startX, startY, 16, 16);
        do _player.render(startX, startY);
        do _score.PrintCounters();
        return;
    }

    /** Парсит карту и игрока из массива строк */
    function Level parse(Array strArray, int width, int height){
        var Map map;
        var Player player;
        var char currentChar;
        var Array blockArray;
        var String line;
        var int x;
        var int y;

        let blockArray = Array.new(width * height);
        while (y < height){
            let line = strArray[y];

            while (x < width){
                let currentChar = line.charAt(x);
                if (currentChar = 80){ // 'P' = player
                    let player = Player.new(x, y);
                }

                let blockArray[y * width + x] = Block.parse(currentChar);
                let x = x + 1;
            }

            let x = 0;
            let y = y + 1;
        }

        let map = Map.new(blockArray, width, height);
        return Level.new(map, player);
    }

    /** Проверяет и обрабатывает сбор монетки на указанной позиции */
    method void checkAndCollectCoin(int x, int y){
        var Block block;
        let block = _map.getBlock(x, y);
        
        if (block.isCoin()){
            do _score.IncreaseCoinCounter();
            do _map.setBlock(x, y, Block.getAir());
        }
        return;
    }

    /** Обновляет состояние уровня */
    method void update() {
        var int playerX, playerY;
        let playerX = _player.getX();
        let playerY = _player.getY();
        
        // Проверяем, не стоит ли игрок на монетке
        do checkAndCollectCoin(playerX, playerY);
        return;
    }
}
