class Level {
    field Map _map;
    field Player _player;
    field Score _score;

    constructor Level new(Map map, Player player){
        let _map = map;
        let _player = player;
        let _score = Score.new();
        return this;
    }

    method void render(int startX, int startY){
        do _map.render(startX, startY, 16, 16);
        do _player.render(startX, startY);
        do _score.PrintCounters();
        do update();  // Обновляем состояние уровня
        return;
    }

    /** Парсит карту и игрока из массива строк */
    function Level parse(Array strArray, int width, int height){
        var Map map;
        var Player player;
        var char currentChar;
        var Array blockArray;
        var String line;
        var int x;
        var int y;

        let blockArray = Array.new(width * height);
        while (y < height){
            let line = strArray[y];

            while (x < width){
                let currentChar = line.charAt(x);
                if (currentChar = 80){ // 'P' = player
                    let player = Player.new(x, y);
                }

                let blockArray[y * width + x] = Block.parse(currentChar);
                let x = x + 1;
            }

            let x = 0;
            let y = y + 1;
        }

        let map = Map.new(blockArray, width, height);
        return Level.new(map, player);
    }

    /** Проверяет и обрабатывает сбор монетки на указанной позиции */
    method void checkAndCollectCoin(int x, int y){
        var Block block;
        let block = _map.getBlock(x, y);
        
        if (block.isCoin()){
            do _score.IncreaseCoinCounter();
            do _map.setBlock(x, y, Block.getAir());
        }
        return;
    }

    /** Обновляет состояние уровня */
    method void update() {
        var int playerX, playerY;
        let playerX = _player.getX();
        let playerY = _player.getY();
        
        // Проверяем, не стоит ли игрок на монетке
        do checkAndCollectCoin(playerX, playerY);
        return;
    }
}
